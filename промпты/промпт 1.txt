import pygame
import sys

# Инициализация Pygame
pygame.init()


class Button:
    def __init__(self, image, pressed_image, action=None):
        self.image = image
        self.pressed_image = pressed_image
        self.rect = self.image.get_rect()
        self.pressed = False
        self.action = action

    def update_position(self, center_x, center_y):
        self.rect.center = (center_x, center_y)

    def draw(self, screen):
        if self.pressed:
            screen.blit(self.pressed_image, self.rect)
        else:
            screen.blit(self.image, self.rect)

    def update(self, event_list):
        for event in event_list:
            if event.type == pygame.MOUSEBUTTONDOWN:
                if self.rect.collidepoint(event.pos):
                    self.pressed = True
            elif event.type == pygame.MOUSEBUTTONUP:
                if self.rect.collidepoint(event.pos) and self.pressed:
                    self.pressed = False
                    if self.action:  # Если кнопка была нажата, выполнить действие
                        self.action()
            elif event.type == pygame.MOUSEMOTION:
                if not self.rect.collidepoint(event.pos):
                    self.pressed = False

    def on_click(self):
        if self.action:  # Вызывать действие кнопки также здесь, если нужно
            self.action()


# Здесь должна быть реализация функции start_game
def start_game():
    print("Начало игры!")  # Вы можете запустить игру здесь


# Здесь должна быть реализация функции settings
def settings():
    print("Настройки игры!")  # Здесь можно вызвать меню настроек


# Функция выхода из игры
def quit_game():
    pygame.quit()
    sys.exit()


# Указание размеров окна
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('SoulReborn')

# Загрузка изображений для иконки и кнопок
icon_image = pygame.image.load('icon.png')
button_image = pygame.image.load('MainMenuSprites/button.png')
button_pressed_image = pygame.image.load('MainMenuSprites/button_pressed.png')

# Установка иконки окна
pygame.display.set_icon(icon_image)

# Создание экземпляров кнопок
button1 = Button(button_image, button_pressed_image, start_game)
button_settings = Button(button_image, button_pressed_image, settings)
button2 = Button(button_image, button_pressed_image, quit_game)

# Определение расстояния между кнопками
button_spacing = 20

# Основной цикл игры
running = True
while running:
    # Заливка экрана
    screen.fill((0, 0, 255))

    # Определение текущего размера экрана
    WIDTH, HEIGHT = pygame.display.get_surface().get_size()

    # Расчёт позиций для кнопок
    total_buttons_height = (button1.rect.height +
                            button_settings.rect.height +
                            button2.rect.height +
                            button_spacing * 2)

    button1_y_position = (HEIGHT - total_buttons_height) / 2
    button_settings_y_position = button1_y_position + button1.rect.height + button_spacing
    button2_y_position = button_settings_y_position + button_settings.rect.height + button_spacing

    button1.update_position(WIDTH / 2, button1_y_position)
    button_settings.update_position(WIDTH / 2, button_settings_y_position)
    button2.update_position(WIDTH / 2, button2_y_position)

    # Отрисовка кнопок
    button1.draw(screen)
    button_settings.draw(screen)
    button2.draw(screen)

    # Получение списка всех событий
    event_list = pygame.event.get()

    # Обработка событий
    for event in event_list:
        if event.type == pygame.QUIT:
            running = False

    # Обновление состояния кнопок
    button1.update(event_list)
    button_settings.update(event_list)
    button2.update(event_list)

    # Переключение экрана
    pygame.display.flip()

pygame.quit()
sys.exit()
нам нужно создать новое меню в виде нового .py кода, которое будет выполнять роль настроек игры, добавь к этому меню